@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use './utils.scss';

@use './validators/_base.scss';

$_default-label: 'Value';

/**
* Calls the given validators with the value and returns a list of validation errors (prefixed with the label).
*/
@function _run-validators($validators, $value, $label) {
  $validation-errors: [];

  @each $key, $validator in $validators {
    $fn: map.get($validator, 'fn');
    $arg: map.get($validator, 'arg');

    // Call the validator function with the value and the argument.
    $res: meta.call($fn, $arg, $value);

    // Only save and process the result, if the validator returned an error (string).
    @if $res != null and meta.type-of($res) == 'string' {
      $validation-errors: list.append($validation-errors, '#{$label} #{$res}');
    }
  }

  @return $validation-errors;
}

/**
* Validates a primitive value (number or string) against the schema.
*
* @param {map} $schema - The schema to validate against, e.g. the return value of `surimi.number(...)`.
* @param {*} $value - The value to validate.
* @param {string} $label - A default label to show in front of error messages (e.g. 'Username').
* if the validator was called with a label (like s.number(..., $label: 'My number')), that label will be used instead.
* @return {list} A list of validation errors, prefixed by a label, or an empty list if the value is valid.
*/
@function _validate-primitive($schema, $value, $label: null) {
  $user-label: map.get($schema, 'label');

  $final-label: $_default-label;
  @if $user-label != null {
    $final-label: $user-label;
  } @else if $label != null {
    $final-label: $label;
  }

  $validators: map.get($schema, 'validators');

  $validation-errors: _run-validators($validators, $value, $final-label);

  @return $validation-errors;
}

/**
* Validates a map value against the schema.
*
* @param {map} $schema - The schema to validate against, e.g. the return value of `surimi.map(...)`.
* @param {map} $value - The value to validate.
* @param {string} $label - A default label to show in front of error messages (e.g. 'User').
* if the validator was called with a label (like s.map(..., $label: 'My map')), that label will be used instead.
* @return {map} A list of all validation errors of the map, flattened into one array.
*/
@function _validate-map($schema, $value, $label) {
  $map-user-label: map.get($schema, 'label');

  $map-label: $_default-label;
  @if $map-user-label != null {
    $map-label: $map-user-label;
  } @else if $label != null {
    $map-label: $label;
  } @else {
    $map-label: 'Map';
  }

  $validators: map.get($schema, 'validators');

  // First, validate the base criteria for the list (like uniqueness, min/max length, etc.)
  $validation-errors: _run-validators($validators, $value, $map-label);

  // Now, validate sub-items
  @each $key, $sub-schema in map.get($schema, 'schema') {
    $sub-value: map.get($value, $key);
    $sub-label: map.get($sub-schema, 'label');

    @if $sub-label == null {
      $sub-label: $key;
    }

    $final-label: '#{$map-label}.#{$sub-label}';

    $res: _validate($sub-schema, $sub-value, $final-label);

    $validation-errors: list.join($validation-errors, $res);
  }

  @return $validation-errors;
}

@function _validate-list($schema, $value, $label) {
  $list-user-label: map.get($schema, 'label');

  $list-label: $_default-label;
  @if $list-user-label != null {
    $list-label: $list-user-label;
  } @else if $label != null {
    $list-label: $label;
  } @else {
    $list-label: 'List';
  }

  $validators: map.get($schema, 'validators');

  // First, validate the base criteria for the list (like uniqueness, min/max length, etc.)
  $validation-errors: _run-validators($validators, $value, $list-label);

  // Now, validate sub-items
  $item-schema: map.get($schema, 'schema');

  @each $item in $value {
    // Validate each item in the list against the schema.
    $res: _validate($item-schema, $item, '#{$list-label} items');
    $validation-errors: list.join($validation-errors, $res);
  }

  @return $validation-errors;
}

/* The base (internal) function to validate any type of schema.
 *
 * @param {map} $schema - The schema to validate against, e.g. the return value of `surimi.number(...)`.
 * @param {*} $value - The value to validate.
 * @param {string} $label - A default label for the value, used in error messages.
 * @return {list} A list of validation errors, or an empty list if the value is valid.
 */
@function _validate($schema, $value, $label: null) {
  @if not utils.is-schema($schema) {
    @error '[surimi] The first value passed to `validate` must be a valid schema, for example the return value of `surimi.number(...)`';
  }

  $validation-errors: base.validate($schema, $value);

  // Check for any 'base errors' first. If they exist, don't run the validators.
  // This is done to ensure the 'base' criteria for validators are met first. See the base.validate function.
  @if list.length($validation-errors) != 0 {
    @return $validation-errors;
  }

  $schema-type: utils.get-schema-type($schema);
  @if $schema-type == 'number' or $schema-type == 'string' {
    $validation-errors: _validate-primitive($schema, $value, $label);
  } @else if $schema-type == 'map' {
    $validation-errors: _validate-map($schema, $value, $label);
  } @else if $schema-type == 'list' {
    $validation-errors: _validate-list($schema, $value, $label);
  } @else {
    @error '[surimi] Invalid schema type `#{$schema-type}`. Supported types are `number`, `string`, and `map`.';
  }

  @return $validation-errors;
}

/* The base function to validate any type of schema.
 *
 * @param {map} $schema - The schema to validate against, e.g. the return value of `surimi.number(...)`.
 * @param {*} $value - The value to validate.
 * @param {string} $label - A default label for the value, used in error messages.
 * if the validator was called with a label (like s.number(..., $label: 'My number')), that label will be used instead.
 * @param {boolean} $throw - Whether to throw an error if the value is invalid.
 * If 'warn' is set to true, this will be 'false', if $throw is set to false, will return a list of validation errors instead of throwing an error.
 * @param {boolean} $warn - Whether to warn instead of throwing an error if the value is invalid.
 * If 'true', will not throw an error, but will return a list of validation errors instead. If 'throw' is set to 'false', will NOT show warnings, but instead
  * return a list of validation errors.
  * @return {list} A list of validation errors, or an empty list if the value is valid.
 */
@function validate-fn($schema, $value, $label: null, $throw: true, $warn: false, $prefix: 'surimi') {
  $validation-errors: _validate($schema, $value, $label);

  // This logic allows an easy way of switching between error, warning and 'return' modes.
  // If 'throw' is set to true (default), it will throw as soon as it finds an error.
  // If 'throw is set to false, it will return a list of validation errors.
  // If 'warn' is set to true, it will warn instead of throwing an error.
  @each $item in $validation-errors {
    @if $throw {
      @error '[#{$prefix}] #{$item}';
    } @else if $warn {
      @warn '[#{$prefix}] #{$item}';
    }
  }

  @return $validation-errors;
}

/* The base mixin to validate any type of schema.
 *
 * @param {map} $schema - The schema to validate against, e.g. the return value of `surimi.number(...)`.
 * @param {*} $value - The value to validate.
 * @param {string} $label - A default label for the value, used in error messages.
 * if the validator was called with a label (like s.number(..., $label: 'My number')), that label will be used instead.
 * @param {boolean} $throw - Whether to throw an error if the value is invalid. If set to 'false', will warn instead.

 * Unlike the `validate-fn` function, `validate` does not have a `warn` parameter. If you need to return a list of validation errors instead of throwing an error,
 * you have to use the `validate-fn` function instead.

 * @return {list} A list of validation errors, or an empty list if the value is valid.
 */
@mixin validate($schema, $value, $label: null, $throw: true, $prefix: 'surimi') {
  $validation-errors: _validate($schema, $value, $label);

  @if $throw {
    @each $item in $validation-errors {
      @error '[#{$prefix}] #{$item}';
    }
  } @else {
    @each $item in $validation-errors {
      @warn '[#{$prefix}] #{$item}';
    }
  }
}
